{
  "openapi": "3.1.0",
  "info": {
    "title": "Postreach AI API",
    "description": "Comprehensive API for automated social media content generation, agent management, and workflow orchestration",
    "version": "1.0.0",
    "contact": {
      "name": "Postreach AI Support",
      "email": "support@postreach.ai",
      "url": "https://docs.postreach.ai"
    },
    "license": {
      "name": "Proprietary",
      "url": "https://postreach.ai/terms"
    }
  },
  "servers": [
    {
      "url": "https://postreachai-ekc4e7fke7bacehe.southeastasia-01.azurewebsites.net/api/v1",
      "description": "Production API Server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/pipeline/generate": {
      "post": {
        "tags": ["Pipeline Operations"],
        "summary": "Generate Social Media Posts",
        "description": "Create automated social media posts across multiple platforms using AI-powered content generation",
        "operationId": "generateSocialMediaPosts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineRequest"
              },
              "examples": {
                "basic_generation": {
                  "summary": "Basic Post Generation",
                  "value": {
                    "mode": "Autopilot",
                    "social_post_number": {
                      "facebook": 2,
                      "instagram": 2,
                      "twitter": 3,
                      "linkedin": 1
                    },
                    "user_info": [
                      {
                        "type": "url",
                        "content": "https://techcrunch.com/2024/01/15/ai-breakthrough-2024",
                        "weight": 1.5
                      }
                    ],
                    "schedule_start_date": "2024-01-20T09:00:00Z",
                    "schedule_end_date": "2024-01-27T18:00:00Z",
                    "country": "US",
                    "language": "en"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipeline generation initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PipelineResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post/regenerate": {
      "post": {
        "tags": ["Pipeline Operations"],
        "summary": "Regenerate Social Media Posts",
        "description": "Regenerate existing social media posts with new content, images, or customizations based on post templates",
        "operationId": "regeneratePosts",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegeneratePostsRequest"
              },
              "examples": {
                "basic_regeneration": {
                  "summary": "Basic Post Regeneration",
                  "value": {
                    "post_templates": [
                      {
                        "post_id": "post_123abc",
                        "platform": "facebook",
                        "post_char_count": 800,
                        "hashtag_number": 5
                      }
                    ]
                  }
                },
                "multi_platform": {
                  "summary": "Multi-Platform Adaptation",
                  "value": {
                    "post_templates": [
                      {
                        "post_id": "post_original_456",
                        "platform": "facebook",
                        "post_char_count": 1500,
                        "hashtag_number": 3
                      },
                      {
                        "post_id": "post_original_456",
                        "platform": "twitter",
                                               "post_char_count": 280,
                       "hashtag_number": 2
                       }
                     ]
                  }
                },
                "image_regeneration": {
                  "summary": "Regenerate with New Images",
                  "value": {
                    "post_templates": [
                      {
                        "post_id": "post_789def",
                        "platform": "instagram",
                        "image_generation": {
                          "regenerate_prompt": true,
                          "regenerate_image": true
                        },
                        "language": "en",
                        "post_char_count": 2000,
                        "image_prompt_word_count": 800,
                        "hashtag_number": 8
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Post regeneration initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegeneratePostsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Reference post not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/pipeline/get_result": {
      "get": {
        "tags": ["Pipeline Operations"],
        "summary": "Get Pipeline Results",
        "description": "Retrieve the results of a completed social media post generation pipeline",
        "operationId": "getPipelineResults",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetResultRequest"
              },
              "examples": {
                "get_result": {
                  "summary": "Get Pipeline Result",
                  "value": {
                    "result_id": "pipeline-abc123-result-456789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pipeline results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResultResponse"
                }
              }
            }
          },
          "404": {
            "description": "Result not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chatbot/message": {
      "post": {
        "tags": ["Chatbot Integration"],
        "summary": "Process Chat Message",
        "description": "Send messages to the AI chatbot for interactive content generation and conversation",
        "operationId": "processChatMessage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatbotRequest"
              },
              "examples": {
                "linkedin_post": {
                  "summary": "Generate LinkedIn Post",
                  "value": {
                    "message": {
                      "content": "Help me create a LinkedIn post about the benefits of remote work",
                      "type": "text"
                    },
                    "mode": "prompt2post",
                    "user_background": {
                      "industry": "Technology",
                      "tone": "professional",
                      "target_audience": "Software developers and tech professionals",
                      "platforms": ["linkedin"]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat message processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatbotResponse"
                }
              }
            }
          }
        }
      }
    },
    "/chatbot/messages/stream": {
      "post": {
        "tags": ["Chatbot Integration"],
        "summary": "Process Chat Message (Streaming)",
        "description": "Stream chatbot responses as Server-Sent Events (SSE) following an Anthropic-style event model.",
        "operationId": "processChatMessageStream",
        "parameters": [
          {
            "name": "Accept",
            "in": "header",
            "required": true,
            "schema": { "type": "string", "example": "text/event-stream" },
            "description": "Must be set to text/event-stream to enable streaming"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatbotRequest" },
              "examples": {
                "stream_linkedin": {
                  "summary": "Stream a LinkedIn post generation",
                  "value": {
                    "message": { "message": "Create a LinkedIn post about remote work" },
                    "mode": "prompt2post",
                    "thread_id": "thread_abc123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SSE stream started. Events will be emitted until completion.",
            "content": {
              "text/event-stream": {
                "schema": { "type": "string", "description": "SSE event stream" },
                "examples": {
                  "sse": {
                    "summary": "SSE Frames",
                    "value": "event: message_start\ndata: {\"type\":\"message_start\",\"message\":{\"id\":\"message_response_...\",\"type\":\"message\",\"role\":\"assistant\",\"content\":[],\"model\":null,\"token_usage\":\"[{\"name\":...}]\",\"thread_id\":\"thread_abc123\",\"stop_reason\":null,\"stop_sequence\":null}}\n\n"
                  }
                }
              }
            }
          }
        },
        "security": [ { "bearerAuth": [] } ],
        "x-mint": {
          "content": "<Info>Set <code>Accept: text/event-stream</code> to receive real-time events. Use the regular message endpoint for a single JSON response.</Info>"
        }
      }
    },
    "/content/extract-keywords": {
      "post": {
        "tags": ["Content Generation"],
        "summary": "Extract Keywords",
        "description": "Extract relevant keywords from URLs and content for social media content generation",
        "operationId": "extractKeywords",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeywordExtractionRequest"
              },
              "examples": {
                "url_extraction": {
                  "summary": "Extract from URL",
                  "value": {
                    "inputs": [
                      {
                        "type": "url",
                        "content": "https://techcrunch.com/2024/01/15/ai-breakthrough-autonomous-vehicles",
                        "weight": 2.0
                      }
                    ],
                    "task_id": "keyword_extraction_v1",
                    "agent_id": "content_analyst_agent"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Keywords extracted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeywordExtractionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/website-analyser/analyze": {
      "post": {
        "tags": ["Website Analysis"],
        "summary": "Analyze Website",
        "description": "Extract comprehensive information from websites including company details, brand identity, and content",
        "operationId": "analyzeWebsite",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebsiteAnalysisRequest"
              },
              "examples": {
                "basic_analysis": {
                  "summary": "Basic Website Analysis",
                  "value": {
                    "url": "https://www.openai.com",
                    "include_logo": true,
                    "include_colors": true,
                    "include_brand": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Website analysis completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebsiteAnalysisResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post-edit/regenerate-caption": {
      "post": {
        "tags": ["Post Edit"],
        "summary": "Regenerate Post Caption",
        "description": "Regenerate the caption of a social media post using conversation context or user preferences",
        "operationId": "regenerateCaption",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              },
              "examples": {
                "regenerate_with_thread": {
                  "summary": "Regenerate Caption from Thread Context",
                  "value": {
                    "thread_id": "thread-abc123",
                    "user_preferences": "Make it more professional and engaging",
                    "number_of_messages": 10,
                    "length_of_caption": 250
                  }
                },
                "regenerate_with_content": {
                  "summary": "Regenerate Caption from Post Content",
                  "value": {
                    "post_content": "Check out this amazing new AI tool that's revolutionizing social media!",
                    "user_preferences": "Add relevant hashtags and make it more conversational",
                    "length_of_caption": 300
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Caption regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post-edit/regenerate-image": {
      "post": {
        "tags": ["Post Edit"],
        "summary": "Regenerate Post Image",
        "description": "Regenerate the image for a social media post using conversation thread context",
        "operationId": "regenerateImage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              },
              "examples": {
                "regenerate_image": {
                  "summary": "Regenerate Image from Thread",
                  "value": {
                    "thread_id": "thread-abc123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Image regenerated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Thread ID is required for image regeneration",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post-edit/remove-emoji": {
      "post": {
        "tags": ["Post Edit"],
        "summary": "Remove Emojis from Post",
        "description": "Remove all emoji characters from social media post content while preserving the text",
        "operationId": "removeEmoji",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              },
              "examples": {
                "remove_emoji": {
                  "summary": "Remove Emojis from Post Content",
                  "value": {
                    "post_content": "Just launched our new product! 🚀✨ So excited to share this with everyone! 🎉💡 Check it out at our website! 🌟"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Emojis removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Post content is required for emoji removal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/post-edit/remove-hashtag": {
      "post": {
        "tags": ["Post Edit"],
        "summary": "Remove Hashtags from Post",
        "description": "Remove all hashtag characters from social media post content while preserving the text",
        "operationId": "removeHashtag",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostEditRequest"
              },
              "examples": {
                "remove_hashtag": {
                  "summary": "Remove Hashtags from Post Content",
                  "value": {
                    "post_content": "Just launched our new AI product! #AI #innovation #technology #startup #ProductLaunch Check it out at our website!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Hashtags removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostEditResponse"
                }
              }
            }
          },
          "400": {
            "description": "Post content is required for hashtag removal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/color-extraction/extract": {
      "post": {
        "tags": ["Image Operations"],
        "summary": "Extract Colors from Image",
        "description": "Extract the main colors from an image URL and get the top 3 colors with over 10% coverage, sorted by percentage",
        "operationId": "extractColors",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ColorExtractionRequest"
              },
              "examples": {
                "brand_logo": {
                  "summary": "Brand Logo Analysis",
                  "value": {
                    "image_url": "https://example.com/brand-logo.png"
                  }
                },
                "product_image": {
                  "summary": "Product Photography",
                  "value": {
                    "image_url": "https://images.unsplash.com/photo-1560472354-b33ff0c44a43?w=800"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Colors extracted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColorExtractionResponse"
                },
                "examples": {
                  "success_response": {
                    "summary": "Successful Color Extraction",
                    "value": {
                      "image_url": "https://example.com/brand-logo.png",
                      "colors": [
                        {
                          "hex_code": "#1E3A8A",
                          "rgb": [30, 58, 138],
                          "percentage": 45.67
                        },
                        {
                          "hex_code": "#F59E0B",
                          "rgb": [245, 158, 11],
                          "percentage": 32.14
                        },
                        {
                          "hex_code": "#FFFFFF",
                          "rgb": [255, 255, 255],
                          "percentage": 22.19
                        }
                      ],
                      "processing_time": 1.23,
                      "total_colors_found": 8,
                      "status": "success",
                      "error": null,
                      "created_at": "2024-01-15T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid image URL or request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ColorExtractionResponse"
                },
                "examples": {
                  "error_response": {
                    "summary": "Failed Color Extraction",
                    "value": {
                      "image_url": "https://invalid-domain.example/nonexistent.jpg",
                      "colors": [],
                      "processing_time": 0.45,
                      "total_colors_found": 0,
                      "status": "failed",
                      "error": "Failed to download image from https://invalid-domain.example/nonexistent.jpg: HTTPSConnectionPool(host='invalid-domain.example', port=443): Max retries exceeded",
                      "created_at": "2024-01-15T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during color extraction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Bearer token authentication"
      }
    },
    "schemas": {
      "PipelineRequest": {
        "type": "object",
        "required": ["social_post_number", "user_info", "schedule_start_date", "schedule_end_date"],
        "properties": {
          "mode": {
            "type": "string",
            "enum": ["Autopilot", "Manual"],
            "default": "Autopilot",
            "description": "Generation mode"
          },
          "social_post_number": {
            "type": "object",
            "properties": {
              "facebook": {"type": "integer", "minimum": 1, "maximum": 10},
              "instagram": {"type": "integer", "minimum": 1, "maximum": 10},
              "twitter": {"type": "integer", "minimum": 1, "maximum": 10},
              "linkedin": {"type": "integer", "minimum": 1, "maximum": 10}
            }
          },
          "user_info": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {"type": "string", "enum": ["url", "topic", "text", "keyword"]},
                "content": {"type": "string"},
                "weight": {"type": "number", "minimum": 0.1, "maximum": 3.0}
              }
            }
          },
          "schedule_start_date": {
            "type": "string",
            "format": "date-time",
            "description": "Start date for post scheduling in ISO 8601 format"
          },
          "schedule_end_date": {
            "type": "string",
            "format": "date-time",
            "description": "End date for post scheduling in ISO 8601 format"
          },
          "country": {"type": "string", "description": "Target country for localization"},
          "language": {"type": "string", "description": "Target language for content generation"},
          "user_id": {"type": "string"}
        }
      },
      "PipelineResponse": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "result_id": {"type": "string"},
          "status": {"type": "string", "enum": ["processing", "completed", "failed"]},
          "posts": {
            "type": "array",
            "items": {"$ref": "#/components/schemas/Post"}
          },
          "execution_time": {"type": "number"},
          "completed_at": {"type": "string", "format": "date-time"},
          "created_at": {"type": "string", "format": "date-time"},
          "error": {"type": "string"}
        }
      },
      "Post": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "platform": {"type": "string", "enum": ["facebook", "instagram", "twitter", "linkedin"]},
          "content": {"type": "string"},
          "image_url": {"type": "string"},
          "image_prompt": {"type": "string"},
          "scheduled_time": {"type": "string", "format": "date-time"},
          "hashtags": {"type": "array", "items": {"type": "string"}},
          "engagement_score": {"type": "number"}
        }
      },
      "GetResultRequest": {
        "type": "object",
        "required": ["result_id"],
        "properties": {
          "result_id": {
            "type": "string",
            "description": "The unique identifier for the pipeline result",
            "example": "pipeline-abc123-result-456789"
          }
        }
      },
      "GetResultResponse": {
        "allOf": [{"$ref": "#/components/schemas/PipelineResponse"}]
      },
      "ChatbotRequest": {
        "type": "object",
        "required": ["message"],
        "properties": {
          "message": {
            "type": "object",
            "required": ["content"],
            "properties": {
              "content": {"type": "string"},
              "type": {"type": "string", "enum": ["text", "image", "url", "quote"], "default": "text"},
              "metadata": {"type": "object"}
            }
          },
          "mode": {
            "type": "string",
            "enum": ["prompt2post", "image2post", "url2post", "quote2post"],
            "default": "prompt2post"
          },
          "thread_id": {"type": "string"},
          "user_background": {
            "type": "object",
            "properties": {
              "industry": {"type": "string"},
              "tone": {"type": "string", "enum": ["professional", "casual", "friendly", "authoritative"]},
              "target_audience": {"type": "string"},
              "brand_voice": {"type": "string"},
              "platforms": {"type": "array", "items": {"type": "string"}}
            }
          },
          "is_dummy_mode": {"type": "boolean", "default": false}
        }
      },
      "ChatbotResponse": {
        "type": "object",
        "properties": {
          "id": {"type": "string"},
          "thread_id": {"type": "string"},
          "type": {"type": "string", "enum": ["message", "post_generation", "error"]},
          "role": {"type": "string", "enum": ["assistant", "system"]},
          "status": {"type": "string", "enum": ["success", "failed", "processing"]},
          "model": {"type": "string"},
          "content": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {"type": "string"},
                "text": {"type": "string"},
                "image_url": {"type": "string"},
                "post_data": {"type": "object"}
              }
            }
          },
          "suggestions": {"type": "array", "items": {"type": "string"}},
          "processing_time": {"type": "number"},
          "usage": {
            "type": "object",
            "properties": {
              "input_tokens": {"type": "integer"},
              "output_tokens": {"type": "integer"},
              "total_tokens": {"type": "integer"}
            }
          },
          "stop_reason": {"type": "string"},
          "error": {"type": "string"}
        }
      },
      "KeywordExtractionRequest": {
        "type": "object",
        "required": ["inputs", "task_id", "agent_id"],
        "properties": {
          "inputs": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["type", "content"],
              "properties": {
                "type": {"type": "string", "enum": ["url", "text", "topic"]},
                "content": {"type": "string"},
                "weight": {"type": "number", "default": 1.0},
                "metadata": {"type": "object"}
              }
            }
          },
          "task_id": {"type": "string"},
          "agent_id": {"type": "string"}
        }
      },
      "KeywordExtractionResponse": {
        "type": "object",
        "properties": {
          "task_id": {"type": "string"},
          "agent_id": {"type": "string"},
          "keywords": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "keyword": {"type": "string"},
                "score": {"type": "number"},
                "category": {"type": "string", "enum": ["topic", "entity", "concept", "hashtag"]},
                "context": {"type": "string"}
              }
            }
          },
          "token_usage": {
            "type": "object",
            "properties": {
              "input_tokens": {"type": "integer"},
              "output_tokens": {"type": "integer"},
              "total_tokens": {"type": "integer"}
            }
          },
          "status": {"type": "string", "enum": ["success", "failed"]},
          "error": {"type": "string"}
        }
      },
      "WebsiteAnalysisRequest": {
        "type": "object",
        "required": ["url"],
        "properties": {
          "url": {"type": "string", "format": "uri"},
          "include_logo": {"type": "boolean", "default": true},
          "include_colors": {"type": "boolean", "default": true},
          "include_brand": {"type": "boolean", "default": true},
          "additional_fields": {
            "type": "array",
            "items": {"type": "string", "enum": ["social_links", "contact_info", "team_info", "product_info", "pricing_info", "blog_posts"]}
          }
        }
      },
      "WebsiteAnalysisResponse": {
        "type": "object",
        "properties": {
          "analysis_id": {"type": "string"},
          "url": {"type": "string"},
          "status": {"type": "string", "enum": ["processing", "partial", "success", "failed"]},
          "company_name": {"type": "string"},
          "company_info": {"type": "string"},
          "logo_url": {"type": "string"},
          "brand_identity": {"type": "string"},
          "brand_voice": {
            "type": "object",
            "properties": {
              "tone": {"type": "string"},
              "personality": {"type": "array", "items": {"type": "string"}},
              "communication_style": {"type": "string"},
              "target_audience": {"type": "string"},
              "key_messages": {"type": "array", "items": {"type": "string"}}
            }
          },
          "color_palette": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "hex": {"type": "string"},
                "rgb": {"type": "object"},
                "name": {"type": "string"},
                "prominence": {"type": "number"}
              }
            }
          },
          "website_content": {"type": "string"},
          "location": {"type": "string", "description": "Geographic location of the website/company"},
          "additional_info": {"type": "object"},
          "processing_time": {"type": "number"},
          "created_at": {"type": "string", "format": "date-time"},
          "error": {"type": "string"}
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "status": {"type": "string", "enum": ["failed"]},
          "error": {"type": "string"},
          "execution_time": {"type": "number"}
        }
      },
      "PostEditRequest": {
        "type": "object",
        "properties": {
          "post_content": {
            "type": "string",
            "description": "The post content to edit (required for remove_emoji and remove_hashtag)"
          },
          "thread_id": {
            "type": "string", 
            "description": "Thread ID for conversation context (used for regenerate_caption and required for regenerate_image)"
          },
          "user_preferences": {
            "type": "string",
            "description": "User preferences for caption regeneration"
          },
          "number_of_messages": {
            "type": "integer",
            "default": 10,
            "description": "Number of latest messages to use for context"
          },
          "length_of_caption": {
            "type": "integer", 
            "default": 300,
            "description": "Length of the caption to generate"
          },
          "session_id": {
            "type": "string",
            "description": "Session ID for tracking"
          },
          "track_id": {
            "type": "string",
            "description": "Track ID for tracking"
          }
        }
      },
      "PostEditResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the post edit result"
          },
          "operation": {
            "type": "string",
            "description": "The editing operation performed"
          },
          "original_content": {
            "type": "string",
            "description": "The original post content"
          },
          "edited_content": {
            "type": "string",
            "description": "The edited post content"
          },
          "original_prompt": {
            "type": "string",
            "description": "The original image prompt"
          },
          "original_image": {
            "type": "string",
            "description": "The URL of the original image"
          },
          "edited_image": {
            "type": "string",
            "description": "The URL of the edited image"
          },
          "processing_time": {
            "type": "number",
            "description": "Time taken to process the edit"
          },
          "thread_id": {
            "type": "string",
            "description": "Thread ID used for context"
          },
          "agent_id": {
            "type": "string",
            "description": "Agent ID used for regeneration"
          },
          "status": {
            "type": "string",
            "enum": ["success", "failed"],
            "description": "Status of the edit operation"
          },
          "error": {
            "type": "string",
            "description": "Error message if edit failed"
          },
          "created_at": {
            "type": "number",
            "description": "Timestamp when edit was created"
          }
        }
      },
      "RegeneratePostsRequest": {
        "type": "object",
        "required": ["post_templates"],
        "properties": {
          "post_templates": {
            "type": "array",
            "description": "Array of post templates defining which posts to regenerate and how to customize them",
            "items": {
              "type": "object",
              "required": ["post_id", "platform"],
              "properties": {
                "post_id": {
                  "type": "string",
                  "description": "ID of the existing post to use as reference for regeneration"
                },
                "platform": {
                  "type": "string",
                  "enum": ["facebook", "instagram", "twitter", "linkedin"],
                  "description": "Target platform for the regenerated post"
                },
                "image_generation": {
                  "type": "object",
                  "description": "Controls image regeneration behavior",
                  "properties": {
                    "regenerate_prompt": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to generate a new image prompt based on the post content"
                    },
                    "regenerate_image": {
                      "type": "boolean",
                      "default": false,
                      "description": "Whether to generate a new image using the prompt"
                    }
                  },
                  "default": {"regenerate_prompt": false, "regenerate_image": false}
                },
                "language": {
                  "type": "string",
                  "description": "Target language for the regenerated content"
                },
                "social_task_version": {
                  "type": "integer",
                  "description": "Version of the social media generation task to use"
                },
                "hashtag_number": {
                  "type": "integer",
                  "description": "Number of hashtags to include in the regenerated post"
                },
                "post_char_count": {
                  "type": "integer",
                  "default": 1000,
                  "description": "Maximum character count for the regenerated post content"
                },
                "image_prompt_generation_task_version": {
                  "type": "integer",
                  "default": 1,
                  "description": "Version of the image prompt generation task to use"
                },
                "image_prompt_word_count": {
                  "type": "integer",
                  "default": 1000,
                  "description": "Word count for image prompt generation"
                },
                "schedule_start_date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Start date for post scheduling in ISO 8601 format"
                },
                "schedule_end_date": {
                  "type": "string",
                  "format": "date-time",
                  "description": "End date for post scheduling in ISO 8601 format"
                }
              }
            }
                     },
           "is_dummy": {
            "type": "boolean",
            "default": false,
            "description": "Generate dummy posts for testing purposes instead of real content"
          }
        }
      },
      "RegeneratePostsResponse": {
        "allOf": [
          {"$ref": "#/components/schemas/PipelineResponse"}
        ]
      },
      "ColorExtractionRequest": {
        "type": "object",
        "required": ["image_url"],
        "properties": {
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the image to analyze for color extraction",
            "example": "https://example.com/brand-logo.png"
          }
        }
      },
      "ColorInfo": {
        "type": "object",
        "required": ["hex_code", "rgb", "percentage"],
        "properties": {
          "hex_code": {
            "type": "string",
            "pattern": "^#[0-9A-Fa-f]{6}$",
            "description": "Hexadecimal color code (e.g., #FF5733)",
            "example": "#1E3A8A"
          },
          "rgb": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0,
              "maximum": 255
            },
            "minItems": 3,
            "maxItems": 3,
            "description": "RGB values as an array [R, G, B] where each value is 0-255",
            "example": [30, 58, 138]
          },
          "percentage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "description": "Percentage of the image covered by this color, rounded to 2 decimal places",
            "example": 45.67
          }
        }
      },
      "ColorExtractionResponse": {
        "type": "object",
        "properties": {
          "image_url": {
            "type": "string",
            "description": "The original image URL that was analyzed",
            "example": "https://example.com/brand-logo.png"
          },
          "colors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ColorInfo"
            },
            "maxItems": 3,
            "description": "Array of dominant colors found in the image (max 3, only colors with >10% coverage)"
          },
          "processing_time": {
            "type": "number",
            "minimum": 0,
            "description": "Time taken to process the image in seconds",
            "example": 1.23
          },
          "total_colors_found": {
            "type": "integer",
            "minimum": 0,
            "description": "Total number of distinct colors found before filtering by 10% threshold",
            "example": 8
          },
          "status": {
            "type": "string",
            "enum": ["success", "failed"],
            "description": "Status of the color extraction operation",
            "example": "success"
          },
          "error": {
            "type": "string",
            "nullable": true,
            "description": "Error message if the operation failed, null if successful",
            "example": null
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO 8601 timestamp when the color extraction was performed",
            "example": "2024-01-15T14:30:00Z"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Pipeline Operations",
      "description": "Automated social media post generation and management"
    },
    {
      "name": "Chatbot Integration",
      "description": "Interactive AI chatbot for content generation and conversation"
    },
    {
      "name": "Content Generation",
      "description": "Content analysis and generation tools"
    },
    {
      "name": "Website Analysis",
      "description": "Website content extraction and brand analysis"
    },
    {
      "name": "Post Edit",
      "description": "Post content editing and regeneration"
    },
    {
      "name": "Image Operations",
      "description": "Image analysis and color extraction tools"
    }
  ]
} 
